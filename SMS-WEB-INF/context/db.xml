<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

  <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jdbc/smsfinance"/>
  </bean>

  <!-- Не вынесено в отдельный файл, т.к. бин должен создаваться до того как поднимается SessionFactory, иначе упадут маппинги Hibernate -->
  <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
    <property name="dataSource" ref="dataSource"/>
    <property name="changeLog" value="classpath:changelogs/changelog.xml"/>
    <property name="contexts" value="schema, data"/>
    <property name="shouldRun" value="${liquibase.shouldRun}"/>
  </bean>

  <!-- Hibernate SessionFactory -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <property name="dataSource">
      <ref local="dataSource"/>
    </property>
    <property name="packagesToScan">
      <list>
        <value>com.improveit.smsfinanceserver.**.model</value>
        <value>com.improveit.smsfinanceserver.**.model.*</value>
        <value>com.improveit.smsfinanceserver.**.model.**.*</value>
        <value>com.improveit.smsfinanceserver.accounting.model.discount.*</value>
        <value>com.improveit.smsfinanceserver.accounting.model.discount.attribute</value>

        <value>com.improveit.smsfinanceserver.scoring.credithistories.equifax.models</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.cache.use_query_cache">false</prop>
        <prop key="hibernate.cache.use_second_level_cache">false</prop>
        <prop key="hibernate.transaction.flush_before_completion">true</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
        <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
        <prop key="hibernate.connection.charSet">UTF-8</prop>
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
        <prop key="hibernate.show_sql">false</prop>
        <prop key="hibernate.format_sql">false</prop>
        <prop key="hibernate.hbm2ddl.auto">validate</prop>
        <prop key="hibernate.jdbc.batch_size">100</prop>

        <!-- Hibernate Envers Audit config -->
        <prop key="org.hibernate.envers.default_catalog">archive</prop>
        <prop key="org.hibernate.envers.auditTablePrefix">arc_</prop>
        <prop key="org.hibernate.envers.auditTableSuffix"></prop>
        <prop key="org.hibernate.envers.store_data_at_delete">true</prop>
      </props>
    </property>

    <!-- Listeners for Hibernate Envers Audit -->
    <property name="eventListeners">
      <map>
        <entry key="post-delete" value-ref="audit"/>
        <!-- === Если нужно трекать добавление и/или изменение записей ===
        <entry key="post-insert" value-ref="audit" />
        <entry key="post-update" value-ref="audit"/>
        <entry key="post-collection-recreate" value-ref="audit"/>
        <entry key="pre-collection-remove" value-ref="audit"/>
        <entry key="pre-collection-update" value-ref="audit"/>
        -->
      </map>
    </property>

    <property name="entityInterceptor" ref="entityInterceptor"/>
  </bean>

  <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <bean id="requiredTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <property name="transactionManager" ref="transactionManager"/>
    <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
  </bean>

  <bean id="requiresNewTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <property name="transactionManager" ref="transactionManager"/>
    <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"/>
  </bean>

  <bean id="reportsTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <property name="transactionManager" ref="transactionManager"/>
    <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
    <property name="isolationLevelName" value="ISOLATION_READ_UNCOMMITTED"/>
  </bean>

  <tx:annotation-driven/>

  <bean id="entityInterceptor" class="com.improveit.smsfinanceserver.infrastructure.dao.interceptor.HibernateInterceptor"/>

  <bean class="com.improveit.smsfinanceserver.infrastructure.dao.interceptor.HibernateListenersBean">
    <property name="containers">
      <list>
        <bean class="com.improveit.smsfinanceserver.infrastructure.dao.interceptor.listeners.AutoCallEntityListeners"/>
        <bean class="com.improveit.smsfinanceserver.infrastructure.dao.interceptor.TransparentEntityListeners">
          <property name="listeners">
            <list>
              <bean class="com.improveit.smsfinanceserver.infrastructure.dao.interceptor.listeners.CallTypeToTelephonyCompanyEntityListener"/>
            </list>
          </property>
        </bean>
        <bean class="com.improveit.smsfinanceserver.infrastructure.dao.interceptor.TransactionalEntityListeners">
          <property name="listeners">
            <list>
              <bean class="com.improveit.smsfinanceserver.infrastructure.dao.interceptor.listeners.BalanceUpdateEntityListener"/>
            </list>
          </property>
        </bean>
      </list>
    </property>
  </bean>

  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
    <constructor-arg name="dataSource" ref="dataSource"/>
  </bean>

  <bean id="audit" class="org.hibernate.envers.event.AuditEventListener"/>

</beans>
